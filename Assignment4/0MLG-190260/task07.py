# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13gB-k08RWAj5lwhfxqZ0p7OA23-CraG4

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**


"""

# TO DO
# Visualize the results
ns = Namespace("http://somewhere#")
rdfs = Namespace("http://www.w3.org/2000/01/rdf-schema#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0")
from rdflib.plugins.sparql import prepareQuery

print("USANDO RDFLib")
for s, p, o in g.triples((None, rdfs.subClassOf, ns.Person)):
  print(s)

print("USANDO SPARQL")
q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?Subject rdfs:subClassOf ns:Person. 
  }
  ''',
  initNs = { "rdfs": rdfs, "ns": ns}
)

for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results

print("USANDO RDFLib")
# Obtenemos las entidades de clase Persona
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)
# Obtenemos las entidades de clase subclase de Persona
for s, p, o in g.triples((None, rdfs.subClassOf, ns.Person)):
  for a, b, c in g.triples((None, RDF.type, s)):
    print(a)

print("USANDO SPARQL")
q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?Subject rdf:type ?type.
    ?type rdfs:subClassOf* ns:Person.
  }
  ''',
  initNs = { "rdfs": rdfs, "ns": ns, "rdf": RDF}
)

for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO
# Visualize the results
#for s, p, o in g:
#  print(s, p, o)

print("USANDO RDFLib")
# Obtenemos las entidades de clase Persona
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  for a, b, c in g.triples((s, None, None)):
    print(a, b, c)
# Obtenemos las entidades de clase subclase de Persona
for s, p, o in g.triples((None, rdfs.subClassOf, ns.Person)):
  for a, b, c in g.triples((None, RDF.type, s)):
    for d, e, f in g.triples((a, None, None)):
      print(d, e, f)

print("USANDO SPARQL")
q1 = prepareQuery('''
  SELECT ?Subject ?p ?z WHERE { 
    ?Subject rdf:type ?type.
    ?type rdfs:subClassOf* ns:Person.
    ?Subject ?p ?z
  }
  ''',
  initNs = { "rdfs": rdfs, "ns": ns, "rdf": RDF}
)

for r in g.query(q1):
  print(r.Subject, r.p, r.z)