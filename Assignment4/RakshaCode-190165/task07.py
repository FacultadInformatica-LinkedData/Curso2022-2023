# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oHrlrEGZpapgppto11Wkm3SIjir8OrgC

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

ns = Namespace("http://somewhere#")

print("TASK 7.1 RDFLib")
for subClass in g.subjects(RDFS.subClassOf, ns.Person): 
  print(subClass)

print("TASK 7.1 SPARQL")
q1 = """
SELECT ?subClass WHERE {
  ?subClass rdfs:subClassOf ns:Person
}
"""
for r in g.query(q1):
  print(r.subClass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

print("TASK 7.2 RDFLib")
for person in g.subjects(RDF.type, ns.Person):
  print(person)
for subClass in g.subjects(RDFS.subClassOf, ns.Person): 
  for person in g.subjects(RDF.type, subClass):
    print(person)

print("TASK 7.2 SPARQL")
q1 = """
SELECT ?person WHERE {
  ?person rdf:type ns:Person .
}
"""
q2 = """
SELECT ?personSubClass WHERE {
  ?subClass rdfs:subClassOf* ns:Person .
  ?personSubClass rdf:type ?subClass .

}
"""
for r in g.query(q1):
  print(r.person)
for r in g.query(q2):
  print(r.personSubClass)

"""** **texto en negrita**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

print("TASK 7.3 RDFLib")
for s in g.subjects(RDF.type, ns.Person):
  for p, o in g.predicate_objects(s):
    print(s, p, o)

for subClass in g.subjects(RDFS.subClassOf, ns.Person): 
  for s in g.subjects(RDF.type, subClass):
    for p, o in g.predicate_objects(s):
      print(s, p, o)

print("TASK 7.3 SPARQL")
q1 = """
SELECT ?person ?pred ?obj WHERE {
  ?person rdf:type ns:Person .
  ?person ?pred ?obj .
}
"""
q2 = """
SELECT ?personSubClass ?pred ?obj WHERE {
  ?subClass rdfs:subClassOf* ns:Person .
  ?personSubClass rdf:type ?subClass .
  ?personSubClass ?pred ?obj .
}
"""
for r in g.query(q1):
  print(r.person, r.pred, r.obj)
for r in g.query(q2):
  print(r.personSubClass, r.pred, r.obj)
