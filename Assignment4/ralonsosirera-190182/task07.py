# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
query1 = prepareQuery('''
    SELECT ?Subject WHERE {
        ?Subject rdfs:subClassOf+ ns:Person
    }
    ''',
    initNs={"ns":Namespace("http://somewhere#"), "rdfs": RDFS}
    )
# Now subclass hierarchy is taken into account
# Visualize the results
print("RDFLib")
def retrieveSubclasses(GivenRDFClass):
  for subclass, p, o in g.triples((None,RDFS.subClassOf,GivenRDFClass)):
    print(subclass)
    retrieveSubclasses(subclass)

retrieveSubclasses(ns.Person)
# Result in SPARQL (by using the query)
print("SPARQL")
for results in g.query(query1):
   print(results)
"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""
query2 = prepareQuery('''
  SELECT DISTINCT ?Subject WHERE { 
    {?Subject rdf:type ns:Person. }
    UNION 
    {?s rdfs:subClassOf+ ns:Person.
    ?Subject rdf:type ?s}
  }
  ''',
  initNs = { "ns": Namespace("http://somewhere#"), "rdf": RDF}
)
# Visualize the results
# RDFLib
print("RDFLib")
# Those people who are either a person or a subClassOf Person (hierarchy taken into account)
def retrieveIndividuals(CurrentClass):
  for subject,property,value in g.triples((None, RDF.type, CurrentClass)):
    print(subject)
  for subclass, p, o in g.triples((None,RDFS.subClassOf,CurrentClass)):
    retrieveIndividuals(subclass)

retrieveIndividuals(ns.Person)
# SPARQL
print("SPARQL")
for results in g.query(query2):
  print(results)
"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**"""
query3 = prepareQuery('''
  SELECT DISTINCT ?Subject ?Property ?Value WHERE { 
    {?Subject rdf:type ns:Person.
     ?Subject ?Property ?Value}
    UNION 
    {?s rdfs:subClassOf+ ns:Person.
    ?Subject rdf:type ?s.
    ?Subject ?Property ?Value}
  }
  ''',
  initNs = {"rdf": RDF, "ns": Namespace("http://somewhere#"), "rdfs": RDFS }
)
# Visualize the results
# RDFLib
print("RDFLib")
# As the previous task we print the values for the Person a subclass individuals
def retrieveIndividualsAndProp(Class):
  for subject,property,value in g.triples((None, RDF.type, Class)):
    for subject,property,value in g.triples((subject,None,None)):
      print(subject,property,value)
  for subclass, p, o in g.triples((None,RDFS.subClassOf,Class)):
    retrieveIndividualsAndProp(subclass)

retrieveIndividualsAndProp(ns.Person)
# SPARQL 
print("SPARQL")
for results in g.query(query3):
    print(results.Subject, results.Property, results.Value)